# Generated by Django 3.2.5 on 2021-07-16 12:33

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AuthGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, unique=True)),
            ],
            options={
                'db_table': 'auth_group',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthGroupPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_group_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('codename', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'auth_permission',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128)),
                ('last_login', models.DateTimeField(blank=True, null=True)),
                ('is_superuser', models.IntegerField()),
                ('username', models.CharField(max_length=150, unique=True)),
                ('first_name', models.CharField(max_length=150)),
                ('last_name', models.CharField(max_length=150)),
                ('email', models.CharField(max_length=254)),
                ('is_staff', models.IntegerField()),
                ('is_active', models.IntegerField()),
                ('date_joined', models.DateTimeField()),
            ],
            options={
                'db_table': 'auth_user',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_groups',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AuthUserUserPermissions',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'auth_user_user_permissions',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoAdminLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_time', models.DateTimeField()),
                ('object_id', models.TextField(blank=True, null=True)),
                ('object_repr', models.CharField(max_length=200)),
                ('action_flag', models.PositiveSmallIntegerField()),
                ('change_message', models.TextField()),
            ],
            options={
                'db_table': 'django_admin_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoContentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('app_label', models.CharField(max_length=100)),
                ('model', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'django_content_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoMigrations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('app', models.CharField(max_length=255)),
                ('name', models.CharField(max_length=255)),
                ('applied', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_migrations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DjangoSession',
            fields=[
                ('session_key', models.CharField(max_length=40, primary_key=True, serialize=False)),
                ('session_data', models.TextField()),
                ('expire_date', models.DateTimeField()),
            ],
            options={
                'db_table': 'django_session',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Stats',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('season', models.CharField(blank=True, max_length=4, null=True)),
                ('date', models.DateField(blank=True, null=True)),
                ('league_id', models.IntegerField(blank=True, null=True)),
                ('league', models.CharField(blank=True, max_length=40, null=True)),
                ('team1', models.CharField(blank=True, max_length=40, null=True)),
                ('team2', models.CharField(blank=True, max_length=40, null=True)),
                ('spi1', models.FloatField(blank=True, null=True)),
                ('spi2', models.FloatField(blank=True, null=True)),
                ('prob1', models.FloatField(blank=True, null=True)),
                ('prob2', models.FloatField(blank=True, null=True)),
                ('probtie', models.FloatField(blank=True, null=True)),
                ('proj_score1', models.FloatField(blank=True, null=True)),
                ('proj_score2', models.FloatField(blank=True, null=True)),
                ('importance1', models.FloatField(blank=True, null=True)),
                ('importance2', models.FloatField(blank=True, null=True)),
                ('score1', models.FloatField(blank=True, null=True)),
                ('score2', models.FloatField(blank=True, null=True)),
                ('xg1', models.FloatField(blank=True, null=True)),
                ('xg2', models.FloatField(blank=True, null=True)),
                ('nsxg1', models.FloatField(blank=True, null=True)),
                ('nsxg2', models.FloatField(blank=True, null=True)),
                ('adj_score1', models.FloatField(blank=True, null=True)),
                ('adj_score2', models.FloatField(blank=True, null=True)),
                ('hometeam', models.CharField(blank=True, db_column='HomeTeam', max_length=24, null=True)),
                ('awayteam', models.CharField(blank=True, db_column='AwayTeam', max_length=24, null=True)),
                ('ftr', models.CharField(blank=True, db_column='FTR', max_length=1, null=True)),
                ('shots1', models.FloatField(blank=True, null=True)),
                ('shots2', models.FloatField(blank=True, null=True)),
                ('shotsot1', models.FloatField(blank=True, null=True)),
                ('shotsot2', models.FloatField(blank=True, null=True)),
                ('fouls1', models.FloatField(blank=True, null=True)),
                ('fouls2', models.FloatField(blank=True, null=True)),
                ('corners1', models.FloatField(blank=True, null=True)),
                ('corners2', models.FloatField(blank=True, null=True)),
                ('yellow1', models.FloatField(blank=True, null=True)),
                ('yellow2', models.FloatField(blank=True, null=True)),
                ('red1', models.FloatField(blank=True, null=True)),
                ('red2', models.FloatField(blank=True, null=True)),
                ('maxh', models.FloatField(blank=True, db_column='MaxH', null=True)),
                ('maxd', models.FloatField(blank=True, db_column='MaxD', null=True)),
                ('maxa', models.FloatField(blank=True, db_column='MaxA', null=True)),
                ('avgh', models.FloatField(blank=True, db_column='AvgH', null=True)),
                ('avgd', models.FloatField(blank=True, db_column='AvgD', null=True)),
                ('avga', models.FloatField(blank=True, db_column='AvgA', null=True)),
                ('max_over25', models.FloatField(blank=True, db_column='Max_over25', null=True)),
                ('max_under25', models.FloatField(blank=True, db_column='Max_under25', null=True)),
                ('avg_over25', models.FloatField(blank=True, db_column='Avg_over25', null=True)),
                ('avg_under25', models.FloatField(blank=True, db_column='Avg_under25', null=True)),
                ('avg_xg1', models.FloatField(blank=True, null=True)),
                ('avg_xg2', models.FloatField(blank=True, null=True)),
                ('adj_avg_xg1', models.FloatField(blank=True, null=True)),
                ('adj_avg_xg2', models.FloatField(blank=True, null=True)),
                ('pts1', models.IntegerField(blank=True, null=True)),
                ('pts2', models.IntegerField(blank=True, null=True)),
                ('xwin1', models.FloatField(blank=True, null=True)),
                ('xdraw', models.FloatField(blank=True, null=True)),
                ('xwin2', models.FloatField(blank=True, null=True)),
                ('xpts1', models.FloatField(blank=True, null=True)),
                ('xpts2', models.FloatField(blank=True, null=True)),
                ('xgshot1', models.FloatField(blank=True, null=True)),
                ('xgshot2', models.FloatField(blank=True, null=True)),
                ('convrate1', models.FloatField(blank=True, null=True)),
                ('convrate2', models.FloatField(blank=True, null=True)),
                ('cards1', models.FloatField(blank=True, null=True)),
                ('cards2', models.FloatField(blank=True, null=True)),
                ('matchday', models.FloatField(blank=True, null=True)),
                ('matchday_away', models.FloatField(blank=True, null=True)),
            ],
            options={
                'db_table': 'stats',
                'managed': False,
            },
        ),
    ]
